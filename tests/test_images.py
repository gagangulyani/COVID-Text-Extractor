"""
This Python script performs unit tests OCR and check if each attribute matches with
excpected output
"""

from json import load
from pathlib import Path
try:
    from config import SHOW_IMAGE, TEST_IMG_DIR
except:
    from .config import SHOW_IMAGE, TEST_IMG_DIR
import unittest
import sys

# Add Parent Directory to Sys Path for testing
sys.path.insert(1, str(Path(__file__).parent.parent.absolute()))

# Import Package where main files are
from src.image_to_text import to_text as ocr


class TestOCR(unittest.TestCase):

    """
    This Class contains unit tests for each attribute generated by the ocr
    and compares it with expected values in `expected_ocr_results.json`.

    Class Attributes:
        expected_results (dict): stores expected results of images
        current_results (dict): stores currently generated results by OCR
        img_names (list): stores names of images to be checked
    """
    expected_results = {}
    current_results = {}
    img_names = []

    @classmethod
    def setUpClass(cls):
        """
        This class method Populates the `expected_results`, `current_results` and `img_names`
        class methods before running unittests.
        """

        # For Storing Absolute Path of Image files
        image_dir = []

        # Load result dictionary
        with open(f"{Path(__file__).parent / 'expected_ocr_results.json'}") as f:
            cls.expected_results = load(f)

        # Gathering Image Names and storing them in TestOCR.img_names
        # if they match names of expected results from expected_ocr_results.json
        for filename in Path(TEST_IMG_DIR).iterdir():
            if cls.expected_results.get(filename.name, None):
                image_dir.append(filename)
                cls.img_names.append(filename.name)

        # Populate result generated by OCR in TestOCR.current_results
        for img_path in image_dir:
            cls.current_results[img_path.name] = ocr(
                str(img_path.absolute()), show_image=False)

    def setUp(self):
        """
        This method ensures that custom error message for the failed unit test
        gets displayed.
        """

        self.longMessage = True

    @staticmethod
    def get_values(key, attribute_name):
        """
        This method returns the values of `expected_results` and `current_results`
        class attributes according to the given key and attribute name.

        Args:
            key (str): Name of The Image File
            attribute_name (str): Attribute name of the result

        Returns:
            tuple: consisting of values from the class attributes and custom error message
        """
        return (
            TestOCR.expected_results.get(key, {}).get(attribute_name), 
            TestOCR.current_results.get(key, {}).get(attribute_name),
            f"{attribute_name} didn't match for Image: {key!a}"
        )

    def assert_images(self, attribute_name):
        """
        This method asserts the values of `expected_results` and `current_results`
        returned by the `get_values` static method and displays the custom error message
        in case assertions fail.

        It does that by traversing the `img_names` class attribute and asserts the result
        for each image.

        Args:
            attribute_name (str): Name of the Attribute that needs to be asserted
        """
        for i in range(len(TestOCR.img_names)):
            self.assertEqual(*TestOCR.get_values(TestOCR.img_names[i], attribute_name))

    def test_phone_numbers(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Phone-Numbers` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Phone-Numbers"
        self.assert_images(attribute_name)

    def test_emails(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Email` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Emails"
        self.assert_images(attribute_name)

    def test_blood_groups(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Blood-Groups` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Blood-Groups"
        self.assert_images(attribute_name)

    def test_required_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Required` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Required"
        self.assert_images(attribute_name)

    def test_help_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Help` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Help"
        self.assert_images(attribute_name)

    def test_food_keywords(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Food` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Food"
        self.assert_images(attribute_name)

    def test_urgent_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Urgent` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Urgent"
        self.assert_images(attribute_name)
    
    def test_icu_beds_keywords(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `ICU BEDS` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "ICU-Beds"
        self.assert_images(attribute_name)

    def test_ventilator_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Ventilator` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Ventilator"
        self.assert_images(attribute_name)
        
    def test_ambulance_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Ambulance` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Ambulance"
        self.assert_images(attribute_name)

    def test_without_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Without` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Without"
        self.assert_images(attribute_name)

    def test_medicine_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Medicine` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Medicine"
        self.assert_images(attribute_name)
    
    def test_remdesivir_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Remdesivir` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Remdesivir"
        self.assert_images(attribute_name)

    def test_fabiflu_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Fabiflu` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Fabiflu"
        self.assert_images(attribute_name)

    def test_vaccine_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Vaccine` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Vaccine"
        self.assert_images(attribute_name)

    def test_age_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Age` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Age"
        self.assert_images(attribute_name)
    
    def test_plasma_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Plasma` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Plasma"
        self.assert_images(attribute_name)
    
    def test_verified_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Verified` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Verified"
        self.assert_images(attribute_name)
    
    def test_oxygen_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Oxygen` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Oxygen"
        self.assert_images(attribute_name)

    def test_free_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Free` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Free"
        self.assert_images(attribute_name)

    def test_report_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Report` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Report"
        self.assert_images(attribute_name)
    
    def test_platelets_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Platelets` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Platelets"
        self.assert_images(attribute_name)

    def test_ecmo_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `ECMO` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "ECMO"
        self.assert_images(attribute_name)

    def test_available_keyword(self):
        """
        This Method Asserts the values of `expected_results` and `current_results`
        of the `Available` attribute for each image name in `img_names` class attribute.
        """
        attribute_name = "Available"
        self.assert_images(attribute_name)
    
if __name__ == '__main__':
    # Run Unit Tests if this script is excuted directly
    unittest.main()
